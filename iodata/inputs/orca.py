# IODATA is an input and output module for quantum chemistry.
# Copyright (C) 2011-2019 The IODATA Development Team
#
# This file is part of IODATA.
#
# IODATA is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# IODATA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
# --
"""Orca Input Module."""

from typing import TextIO
from string import Template
from attr import asdict

from ..iodata import IOData
from ..periodic import num2sym
from ..utils import angstrom

__all__ = []


default_template = """\
! ${lot} ${obasis_name} ${run_type}
# ${title}
*xyz ${charge} ${spinmult}
${geometry}
*"""


def write_input(f: TextIO, data: IOData, template: str = None):
    """Do not edit this docstring. It will be overwritten."""
    # load IOData dict using attr.asdict because the IOData class uses __slots__
    fields = asdict(data)

    # store atomic coordinates in angstrom
    fields["atcoords"] = data.atcoords / angstrom

    # replace None for default values
    fields["title"] = data.title if data.title is not None else 'Input Generated by IOData'
    fields["run_type"] = data.run_type if data.run_type is not None else 'energy'
    # convert spin polarization to multiplicity
    fields["spinmult"] = int(data.spinpol) + 1 if data.spinpol is not None else 1
    fields["charge"] = int(data.charge) if data.nelec is not None else 0
    fields["lot"] = data.lot if data.lot is not None else 'HF'
    fields["obasis_name"] = data.obasis_name if data.obasis_name is not None else 'STO-3G'

    # convert run type to orca keywords
    run_types = {"energy": "Energy", "freq": "Freq", "opt": "Opt"}
    fields["run_type"] = run_types[fields["run_type"].lower()]

    # generate geometry (in angstrom)
    geometry = []
    for num, coord in zip(fields["atnums"], fields["atcoords"]):
        sym = f"{num2sym[num]:3}"
        # check if template has a %coords block
        if template is not None and "%coords" in template:
            sym = f"{sym:>11}"  # adding an appropiate indentation
        geometry.append(f"{sym} {coord[0]:10.6f} {coord[1]:10.6f} {coord[2]:10.6f}")
    fields["geometry"] = "\n".join(geometry)

    # get template
    if template is None:
        template = default_template

    # populate files & write input
    print(Template(template).substitute(fields), file=f)
