# IODATA is an input and output module for quantum chemistry.
# Copyright (C) 2011-2019 The IODATA Development Team
#
# This file is part of IODATA.
#
# IODATA is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# IODATA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
# --
"""Gaussian Input Module."""


# from attr import asdict
from typing import TextIO
from string import Template

from ..iodata import IOData
from ..periodic import num2sym
from ..utils import angstrom


__all__ = []


default_template = """\
#n ${lot}/${obasis_name} ${run_type}

${title}

${charge} ${spinmult}
${geometry}

"""


def write_input(f: TextIO, data: IOData, template: str = None):

    # load IOData dict using attr.asdict because the IOData class uses __slots__
    # fields = asdict(data)
    fields = {"atnums": data.atnums,
              "atcoords": data.atcoords / angstrom,
              "title": data.title if not None else 'Input Generated by IOData',
              "run_type": data.run_type if data.run_type is not None else 'energy',
              # convert spin polarization to multiplicity
              "spinmult": int(data.spinpol) + 1,
              "charge": int(data.charge),
              "lot": data.lot if data.lot is not None else 'hf',
              "obasis_name": data.obasis_name if data.obasis_name is not None else 'sto-3g',
              }

    # convert run type to Gaussian keywords
    run_types = {"energy": "sp", "freq": "freq", "opt": "opt"}
    fields["run_type"] = run_types[fields["run_type"].lower()]

    # generate geometry (in angstrom)
    geometry = []
    for num, coord in zip(fields["atnums"], fields["atcoords"]):
        geometry.append(f"{num2sym[num]:3} {coord[0]:10.6f} {coord[1]:10.6f} {coord[2]:10.6f}")
    fields["geometry"] = "\n".join(geometry)

    # get template
    if template is None:
        template = default_template

    # populate files & write input
    print(Template(template).substitute(fields), file=f)
